(* 自分自身を実行可能なbrainfuckインタプリタ
   入力の形式:
     {brainfuckのコード}\{入力}
*)

open import "std/std.bfml"

let main = $

// コード入力
$build {
  code: array(_) {
    inst: cell;
    depth: cell;
    p: index;
  }
}

**let p = code@p in $

$dive p
$alloc {
  cont; flag_next
}

+ cont
! cont [
  , p:inst
  + flag_next
  *Ctrl:gen_switch p:inst
    ( ('+', [ + p:inst 1 ]);
      ('-', [ + p:inst 2 ]);
      ('>', [ + p:inst 3 ]);
      ('<', [ + p:inst 4 ]);
      ('[', [
        + p:inst 5
        + p:(1)depth
      ]);
      (']', [
        + p:inst 6
        - p:depth
      ]);
      ('.', [ + p:inst 7 ]);
      (',', [ + p:inst 8 ]);
      ('\\', [
        - flag_next
        - cont
      ]);
    )
    [ - flag_next ]
  ! flag_next [
    - flag_next
    *Ctrl:gen_repeat_restore p:depth [ + p:(1)depth ]
    > p
  ]
]

*Ctrl:gen_reset_index code@p

// 実行
$build {
  tape: array(_) {
    v: cell;
    p: index;
  }
}

**let p = code@p in $

$dive p
$alloc { depth_cur }

! p:inst [
  *Ctrl:gen_switch_nat p:inst
    ( [];
      [ + tape@p:v ];
      [ - tape@p:v ];
      [ > tape@p ];
      [ < tape@p ];
      [ // while
        ? tape@p:v [] [
          *Ctrl:gen_repeat_restore p:depth
            [ + depth_cur  - p:(1)depth ]
          > p
          ! p:depth [
            *Ctrl:gen_repeat_restore depth_cur
              [ + p:depth  - p:(1)depth ]
            > p
          ]
          *Ctrl:gen_repeat depth_cur [ + p:depth ]
        ]
      ];
      [ // wend
        *Ctrl:gen_repeat_restore p:depth
          [ + depth_cur  - p:(-1)depth ]
        < p
        ! p:depth [
          *Ctrl:gen_repeat_restore depth_cur
            [ + p:depth  - p:(-1)depth ]
          < p
        ]
        *Ctrl:gen_repeat depth_cur [ + p:depth ]
        < p
      ];
      [ . tape@p:v ];
    )
    [ , tape@p:v ]
  > p
]